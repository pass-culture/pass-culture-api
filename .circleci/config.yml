version: 2
jobs:
  build:
    working_directory: ~/pass-culture-api-ci
    docker:
      - image: circleci/python:3.7.6
        environment:
          DATABASE_URL_TEST: postgresql://pytest:pytest@localhost:5432/pass_culture
          REDIS_URL: redis://localhost:6379
      - image: circleci/postgres:11.6-alpine
        environment:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
      - image: redis
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Check for alembic multiple heads
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python -m nltk.downloader punkt stopwords &> /dev/null
            if [ ! -z "$(PYTHONPATH=. alembic branches)" ]; then echo "Multiple alembic heads found"; exit 1; fi
      - run:
          name: Running tests
          command: |
            gpg --passphrase $PASS_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            . venv/bin/activate
            pytest tests --cov --cov-report html -x
            coveralls
      - store_artifacts:
          path: htmlcov
  build-container:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture-main/api
    steps:
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Build docker image
          command: docker build -t passcultureapp/api-flask:latest .
      - run:
          name: Push docker image
          command: |
            docker login -u passcultureapp -p $DOCKERHUB_PASSWORD
            docker push passcultureapp/api-flask:latest

  tests-metabase:
    working_directory: ~/
    docker:
      - image: circleci/python:3.7.6
        environment:
          DATABASE_URL: postgresql://pass_culture:passq@postgres-product:5432/pass_culture
      - image: circleci/postgres:11.6-alpine
        name: postgres-product
        environment:
          POSTGRES_USER: pass_culture
          POSTGRES_PASSWORD: passq
          POSTGRES_DB: pass_culture
    steps:
      - run:
          name: Initialize environment
          command: |
            git clone https://github.com/betagouv/pass-culture-metabase.git
            cd pass-culture-metabase
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: Running tests
          command: |
            . venv/bin/activate
            pytest tests

  functional-tests-webapp:
    machine:
      image: circleci/classic:latest
    working_directory: ~/
    steps:
      - run:
          name: Initialize environment
          command: |
            git clone https://github.com/betagouv/pass-culture-main.git
            cd pass-culture-main
            rm -rf shared
            git clone https://github.com/betagouv/pass-culture-browser.git webapp
            ./install_lib_ci.sh
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            export PC_GPG_PRIVATE=$PASS_PRIVATE
            cd ~/pass-culture-main/api
            rm -rf private
            gpg --passphrase $PC_GPG_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            rm private.tar.gz
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Run Frontend Webapp (Prod version)
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            git checkout master
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running end2end tests WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            dockerize -wait http://localhost:3000 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture-main/webapp/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  functional-tests-pro:
    machine:
      image: circleci/classic:latest
    working_directory: ~/
    steps:
      - run:
          name: Init env
          command: |
            git clone https://github.com/betagouv/pass-culture-main.git
            cd pass-culture-main
            rm -rf shared
            git clone https://github.com/betagouv/pass-culture-pro.git pro
            ./install_lib_ci.sh
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            export PC_GPG_PRIVATE=$PASS_PRIVATE
            cd ~/pass-culture-main/api
            rm -rf private
            gpg --passphrase $PC_GPG_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            rm private.tar.gz
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Run Frontend Pro (Prod version)
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/pro
            nvm install
            git checkout master
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running end2end tests PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/pro
            nvm install
            dockerize -wait http://localhost:3001 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - store_artifacts:
         path: ~/pass-culture-main/pro/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

workflows:
  version: 2
  commit:
    jobs:
      - tests-metabase
      - build:
          filters:
            branches:
              ignore:
                - production
      - build-container:
          filters:
            branches:
              only:
                - master
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - functional-tests-webapp
      - functional-tests-pro
