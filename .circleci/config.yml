# Python CircleCI 2.0 configuration file
version: 2
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/pass-culture-api-ci
    docker:
      - image: circleci/python:3.6.6 # ...with this image as the primary container; this is where all `steps` will run        environment:
        environment:
          POSTGRES_USER: pass_culture_user
          POSTGRES_PASSWORD: pass_culture_pass
          POSTGRES_DB: pass_culture
          DATABASE_URL: postgresql://pass_culture_user:pass_culture_pass@localhost:5432/pass_culture
          MAILJET_API_KEY: $MAILJET_API_KEY
          MAILJET_API_SECRET: $MAILJET_API_SECRET
          EXPORT_TOKEN: $EXPORT_TOKEN
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: pass_culture_user
          POSTGRES_PASSWORD: pass_culture_pass
          POSTGRES_DB: pass_culture
    steps:
      - checkout # special step to check out source code to the working directory
      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: # install and activate virtual environment with pip
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache: # special step to save dependency cache
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Running API
          command: |
            gpg --passphrase $PASS_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            . venv/bin/activate
            python -m nltk.downloader punkt stopwords
            python app.py
          background: true
      - run: # run tests
          name: Running tests
          command: |
            . venv/bin/activate
            pytest tests

  check-dependencies:
    working_directory: ~/pass-culture-api-ci # directory where steps will run
    docker: # run the steps with Docker
      - image: circleci/python:3.6.6
    steps: # a collection of executable commands
      - checkout # special step to check out source code to the working directory
      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: # install and activate virtual environment with pip
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - run:
          name: Check outdated dependencies
          command: |
            . venv/bin/activate
            ./scripts/check-pip-dependencies.sh

  functional-tests-webapp:
    machine:
      image: circleci/classic:latest
    working_directory: ~/
    steps: # a collection of executable commands
      - run:
          name: Init env
          command: |
            git clone https://github.com/betagouv/pass-culture-main.git
            cd pass-culture-main
            rm -rf shared
            git clone https://github.com/betagouv/pass-culture-browser.git webapp
            ./install_lib_ci.sh
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            export PC_GPG_PRIVATE=$PASS_PRIVATE
            cd ~/pass-culture-main/api
            rm -rf private
            gpg --passphrase $PC_GPG_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            rm private.tar.gz
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Run Frontend Webapp (Prod version)
          command: |
            export PATH=${PATH:44}
            export NVM_BIN=/usr/bin/nodejs
            export PATH=$NVM_BIN:$PATH
            cd ~/pass-culture-main/webapp
            git checkout "${CIRCLE_BRANCH}"
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running tests Webapp
          command: |
            export PATH=${PATH:44}
            export NVM_BIN=/usr/bin/nodejs
            export PATH=$NVM_BIN:$PATH
            cd ~/pass-culture-main/webapp
            yarn test:cafe

  functional-tests-pro:
    machine:
      image: circleci/classic:latest
    working_directory: ~/
    steps: # a collection of executable commands
      - run:
          name: Init env
          command: |
            git clone https://github.com/betagouv/pass-culture-main.git
            cd pass-culture-main
            rm -rf shared
            git clone https://github.com/betagouv/pass-culture-pro.git pro
            ./install_lib_ci.sh
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            export PC_GPG_PRIVATE=$PASS_PRIVATE
            cd ~/pass-culture-main/api
            rm -rf private
            gpg --passphrase $PC_GPG_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            rm private.tar.gz
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Run Frontend Pro (Prod version)
          command: |
            export PATH=${PATH:44}
            export NVM_BIN=/usr/bin/nodejs
            export PATH=$NVM_BIN:$PATH
            cd ~/pass-culture-main/pro
            git checkout "${CIRCLE_BRANCH}"
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running tests Pro
          command: |
            export PATH=${PATH:44}
            export NVM_BIN=/usr/bin/nodejs
            export PATH=$NVM_BIN:$PATH
            cd ~/pass-culture-main/pro
            yarn testcafe

workflows:
  version: 2
  commit:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - production
      - functional-tests-webapp:
          filters:
            branches:
              only:
                - staging
      - functional-tests-pro:
          filters:
            branches:
              only:
                - staging
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - functional-tests-webapp
      - functional-tests-pro
  weekly:
    triggers: #use the triggers key to indicate a scheduled build
      - schedule:
          cron: "0 1 * * 1" # run every monday at 1 am !!!! UTC TIME !!!!
          filters:
            branches:
              only:
                - master
    jobs:
      - check-dependencies
