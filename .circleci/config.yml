version: 2.1

executors:
  gcp-sdk:
    docker:
      - image: google/cloud-sdk:316.0.0

  helm:
    docker:
      - image: passcultureapp/helm-gcp:3.4.1

commands:
  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp-key-name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp-key-name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}

jobs:
  run-tests:
    parameters:
      is_nightly_build:
        type: boolean
        default: false
    working_directory: ~/pass-culture-api-ci
    docker:
      - image: circleci/python:3.7.6
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          DATABASE_URL_TEST: postgresql://pytest:pytest@localhost:5432/pass_culture
          REDIS_URL: redis://localhost:6379
      - image: circleci/postgres:12.3-postgis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
      - image: redis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Install pcapi Python package
          command: |
              venv/bin/pip install -e .
              venv/bin/pip freeze
      - run:
          name: Check for alembic multiple heads
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python -m nltk.downloader punkt stopwords &> /dev/null
            if [ ! -z "$(alembic branches)" ]; then echo "Multiple alembic heads found"; exit 1; fi
      - when:
          condition: << parameters.is_nightly_build >>
          steps:
            - run:
                name: Running tests
                command: |
                  RUN_ENV=tests venv/bin/pytest tests --cov --cov-report html --junitxml=test-results/junit.xml -x
                  venv/bin/coveralls
      - unless:
          condition: << parameters.is_nightly_build >>
          steps:
            - run:
                name: Running tests
                command: |
                  RUN_ENV=tests venv/bin/pytest tests --junitxml=test-results/junit.xml -x
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov

  build-container:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture-main/api
    steps:
      - checkout:
          path: ~/pass-culture-main/api
      - restore_cache:
          name: Restore requirements checksum
          keys:
            # By using only cache prefix, we load the most recent checksum
            - pass-culture-api-requirements-checksum-
      - run:
          name: Check if the requirements have changed
          command: md5sum --status -c requirements.md5;
      - run:
          name: Build docker image when requirements have changed
          command: docker build -t passcultureapp/api-flask:latest .
          when: on_fail
      - run:
          name: Push docker image
          command: |
            docker login -u passcultureapp -p $DOCKERHUB_PASSWORD
            docker push passcultureapp/api-flask:latest
          when: on_fail
      - run:
          name: Generate requirements print
          command: md5sum ./requirements.txt > requirements.md5
          when: on_fail
      - save_cache:
          key: pass-culture-api-requirements-checksum-{{ .Revision }}
          paths:
            - requirements.md5
          when: on_fail

  build-and-push-image:
    executor: gcp-sdk
    environment:
      IMAGE_NAME: pass-culture-api
      GCP_REGION: europe-west1
      GCP_REGISTRY_NAME: pass-culture-artifact-registry
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - authenticate_gcp:
          gcp-key-name: GCP_INFRA_KEY
      - run: gcloud beta auth configure-docker ${GCP_REGION}-docker.pkg.dev
      - run: docker build -t ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/${IMAGE_NAME}:$CIRCLE_SHA1 .
      - run: docker push ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/${IMAGE_NAME}:$CIRCLE_SHA1

  deploy-cloudrun:
    executor: gcp-sdk
    environment:
      APP_NAME: pass-culture-api-dev
      IMAGE_NAME: pass-culture-api
      PORT: 80
      MEMORY: 2Gi
      GCP_REGION: europe-west1
      GCP_PROJECT: pass-culture-app-projet-test
      GCP_REGISTRY_NAME: pass-culture-artifact-registry
      SA_EMAIL: secret-reader@pass-culture-app-projet-test.iam.gserviceaccount.com
    steps:
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - run:
          name: Deploy passculture-api image from artifact registry to CloudRun
          command: |
            gcloud run deploy ${APP_NAME} \
            --platform=managed \
            --no-allow-unauthenticated \
            --vpc-connector=cloud-run-to-cloud-sql \
            --project ${GCP_PROJECT} \
            --region ${GCP_REGION} \
            --port=$PORT \
            --memory=${MEMORY} \
            --service-account ${SA_EMAIL} \
            --set-env-vars "\
              ON_USER_RECIPIENTS=dev+testing@passculture.app, \
              ADMINISTRATION_EMAIL_ADDRESS=dev+testing@passculture.app, \
              ALGOLIA_APPLICATION_ID=testingHXXTDUE7H0, \
              DATABASE_URL=sm://${GCP_PROJECT}/postgres-pass-culture-api-ehp-credentials-chain, \
              DEV_EMAIL_ADDRESS=dev+testing@passculture.app, \
              ENV=testing, \
              FTP_TITELIVE_URI=ftp.astitelive.com, \
              FTP_TITELIVE_USER=MINCULTURE, \
              JOUVE_API_DOMAIN=https://ws-passculture.jouve.com, \
              JOUVE_USERNAME=passculture, \
              JOUVE_VAULT_GUID=790B582D-C901-4712-835D-61049B660213, \
              MATOMO_SERVER_URL=https://pc-matomo.scalingo.io/, \
              OBJECT_STORAGE_URL=https://storage.gra.cloud.ovh.net/v1/AUTH_688df1e25bd84a48a3804e7fa8938085/storage-pc-dev, \
              OVH_BUCKET_NAME=storage-pc-dev, \
              OVH_REGION_NAME=GRA, \
              OVH_TENANT_NAME=4754281319661209, \
              OVH_USER=hP3PDYQsaxab, \
              PAYMENTS_DETAILS_RECIPIENTS=dev+testing@passculture.app, \
              PAYMENTS_REPORT_RECIPIENTS=dev+testing@passculture.app, \
              PYTHONSTARTUP=/app/.env_ps1.py, \
              REDIS_URL=m://${GCP_PROJECT}/redis-pass-culture-api-ehp-credentials-chain, \
              SUPPORT_EMAIL_ADDRESS=dev+testing@passculture.app, \
              TEST_VAR=test_variable, \
              TRANSACTIONS_RECIPIENTS="dev+testing@passculture.app", \
              UNICORN_N_WORKERS=2, \
              UNICORN_TIMEOUT=90, \
              UPDATE_BOOKING_USED=True, \
              WALLET_BALANCES_RECIPIENTS=dev+testing@passculture.app, \
              ALGOLIA_API_KEY=sm://${GCP_PROJECT}/${APP_NAME}_algolia_api_key, \
              ALLOCINE_API_KEY=sm://${GCP_PROJECT}/${APP_NAME}_allocine_api_key, \
              BASTION_TOKEN=sm://${GCP_PROJECT}/${APP_NAME}_bastion_token, \
              DEMARCHES_SIMPLIFIEES_TOKEN=sm://${GCP_PROJECT}/${APP_NAME}_demarches_simplifiees_token, \
              DEMARCHES_SIMPLIFIEES_WEBHOOK_TOKEN=sm://${GCP_PROJECT}/${APP_NAME}_demarches_simplifiees_webhook_token, \
              EXPORT_TOKEN=sm://${GCP_PROJECT}/${APP_NAME}_export_token, \
              FLASK_SECRET=sm://${GCP_PROJECT}/${APP_NAME}_flask_secret, \
              FTP_TITELIVE_PWD=sm://${GCP_PROJECT}/${APP_NAME}_ftp_titelive_pwd, \
              JOUVE_PASSWORD=sm://${GCP_PROJECT}/${APP_NAME}_jouve_password, \
              MAILJET_API_KEY=sm://${GCP_PROJECT}/${APP_NAME}_mailjet_api_key, \
              MAILJET_API_SECRET=sm://${GCP_PROJECT}/${APP_NAME}_mailjet_api_secret, \
              OVH_PASSWORD=sm://${GCP_PROJECT}/ovh_password, \
              PASS_CULTURE_BIC=sm://${GCP_PROJECT}/${APP_NAME}_pass_culture_bic, \
              PASS_CULTURE_IBAN=sm://${GCP_PROJECT}/${APP_NAME}_pass_culture_iban, \
              PASS_CULTURE_REMITTANCE_CODE=sm://${GCP_PROJECT}/${APP_NAME}_pass_culture_remittance_code, \
              PC_GOOGLE_KEY=sm://${GCP_PROJECT}/${APP_NAME}_pc_google_key, \
              PROVIDER_FNAC_BASIC_AUTHENTICATION_TOKEN=sm://${GCP_PROJECT}/${APP_NAME}_provider_fnac_basic_authentication_token, \
              RECAPTCHA_SECRET=sm://${GCP_PROJECT}/${APP_NAME}_recaptcha_secret, \
              SCALINGO_APP_TOKEN=sm://${GCP_PROJECT}/${APP_NAME}_scalingo_app_token" \
            --image=${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/${IMAGE_NAME}:latest

  deploy-cron-and-worker:
    executor: helm
    environment:
      GCP_REGION: europe-west1
      GCP_PROJECT: pass-culture-app-projet-test
      GCP_REGISTRY_NAME: pass-culture-artifact-registry
      GKE_CLUSTER_NAME: cluster-metier-development
      HELM_EXPERIMENTAL_OCI: 1
      CHART_NAME: passculture-chart
      HELM_CHART_URI: ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${TAG}
      HELM_CHART_NAME: passculture
      HELM_RELEASE_NAME: development
      KUBERNETES_NAMESPACE: development
      HELM_VALUES_FILE: values.yaml
      TAG: stable
    steps:
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run:
          name: Login to GCP Artifact Registry with helm
          command: echo ${GCP_INFRA_KEY} | helm registry login  -u _json_key --password-stdin ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}
      - run:
          name: Pull chart from registry
          command: helm chart pull ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${TAG}
      - run:
          name: Export chart in local filesystem
          command: helm chart export ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${TAG} -d tmp/
      - run:
          name: Install chart update
          command: helm upgrade -i --wait ${HELM_RELEASE_NAME} tmp/${HELM_CHART_NAME} -n ${KUBERNETES_NAMESPACE} -f tmp/${HELM_CHART_NAME}/${HELM_VALUES_FILE}

  tests-data-analytics:
    docker:
      - image: circleci/python:3.6.11
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          DATABASE_URL: postgresql://pass_culture:passq@postgres-product:5432/pass_culture
      - image: circleci/postgres:12.3-postgis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        name: postgres-product
        environment:
          POSTGRES_USER: pass_culture
          POSTGRES_PASSWORD: passq
          POSTGRES_DB: pass_culture
    steps:
      - checkout
      - run:
          name: Initialize api environment
          command: |
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-api.git || git clone https://github.com/betagouv/pass-culture-api.git;
            cd pass-culture-api;
            python3 -m venv venv
            . venv/bin/activate
            pip install -e .
            pip install -r requirements.txt;
            python -m nltk.downloader punkt stopwords;
            python -m pcapi.install_database_extensions;
            alembic upgrade head;
      - run:
          name: Run data-analytics tests
          command: |
            git clone https://github.com/betagouv/pass-culture-data-analytics.git
            cd pass-culture-data-analytics
            pipenv install -e .
            pipenv run pytest
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  functional-tests-webapp:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/
    steps:
      - run:
          name: Initialize environment
          command: |
            git clone https://github.com/betagouv/pass-culture-main.git
            cd pass-culture-main
            rm -rf shared
            git clone https://github.com/betagouv/pass-culture-browser.git webapp
            ./install_lib_ci.sh
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            cd ~/pass-culture-main/api
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Run Frontend Webapp (Prod version)
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            git checkout master
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running end2end tests WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            dockerize -wait http://localhost:3000 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture-main/webapp/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  functional-tests-pro:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/
    steps:
      - run:
          name: Init env
          command: |
            git clone https://github.com/betagouv/pass-culture-main.git
            cd pass-culture-main
            rm -rf shared
            git clone https://github.com/betagouv/pass-culture-pro.git pro
            ./install_lib_ci.sh
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            cd ~/pass-culture-main/api
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Run Frontend Pro (Prod version)
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/pro
            nvm install
            git checkout master
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running end2end tests PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/pro
            nvm install
            dockerize -wait http://localhost:3001 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture-main/pro/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

workflows:
  version: 2
  commit:
    jobs:
      - run-tests:
          filters:
            branches:
              ignore:
                - production
      - build-container:
          filters:
            branches:
              only:
                - migration-gcp
      - build-and-push-image:
          filters:
            branches:
              only:
                - migration-gcp
      - deploy-cloudrun:
          requires:
            - build-and-push-image
          filters:
            branches:
              only:
                - migration-gcp
      - deploy-cron-and-worker:
          filters:
            branches:
              only:
                - migration-gcp

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - functional-tests-webapp
      - functional-tests-pro
      - tests-data-analytics
      - run-tests:
          is_nightly_build: true
