version: 2.1
orbs:
  slack: circleci/slack@4.2

slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/notify:
        event: fail
        channel: sh√©rif
        custom: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Oups, `nightly` a eu un soucis cette nuit :pleurs:"
                },
                "accessory": {
                  "type": "image",
                  "image_url": "https://upload.wikimedia.org/wikipedia/commons/f/f3/Airport-firefighters-drill.jpg",
                  "alt_text": "Nightly down"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View job",
                      "emoji": true
                    },
                    "url": "$CIRCLE_BUILD_URL"
                  }
                ]
              }
            ]
          }

slack-send-deployment-notification: &slack-send-deployment-notification
  - slack/notify:
      event: pass
      channel: alertes-deploiement
      custom: |
        {
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "${CIRCLE_SHA1} has been successfully deployed to testing :muscle:"
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View job",
                    "emoji": true
                  },
                  "url": "$CIRCLE_BUILD_URL"
                }
              ]
            }
          ]
        }
  - slack/notify:
      event: fail
      channel: alertes-deploiement
      custom: |
        {
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "${CIRCLE_SHA1} this deployment has failed :pleurs:"
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View job",
                    "emoji": true
                  },
                  "url": "$CIRCLE_BUILD_URL"
                }
              ]
            }
          ]
        }

###################
#  EXECUTORS
###################

executors:
  gcp-sdk:
    docker:
      - image: google/cloud-sdk:316.0.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

  helm:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/helm-gcp:3.4.1
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  COMMANDS
###################

commands:
  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp-key-name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp-key-name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}

  deploy-pcapi-gke:
    description: Deploy Crons and worker via helm to Kubernetes Cluster
    parameters:
      helm_release_name:
        type: string
      helm_chart_name:
        type: string
      kubernetes_namespace:
        type: string
      helm_values_file:
        type: string
    steps:
      - run: |
          helm upgrade << parameters.helm_release_name >> tmp/<< parameters.helm_chart_name >> \
            --install --wait \
            --namespace << parameters.kubernetes_namespace >> \
            --values tmp/<< parameters.helm_chart_name >>/<< parameters.helm_values_file >> \
            --set-string image.tag=${CIRCLE_SHA1}

###################
#  JOBS
###################

jobs:
  run-tests:
    parameters:
      is_nightly_build:
        type: boolean
        default: false
    working_directory: ~/pass-culture-api-ci
    docker:
      - image: circleci/python:3.9.4
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          DATABASE_URL_TEST: postgresql://pytest:pytest@localhost:5432/pass_culture
          REDIS_URL: redis://localhost:6379
      - image: circleci/postgres:12.3-postgis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
      - image: redis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - unless:
          condition:
            equal: [ "master", << pipeline.git.branch >> ]
          steps:
            - restore_cache:
                key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - unless:
          condition:
            equal: [ "master", << pipeline.git.branch >> ]
          steps:
            - save_cache:
                key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
                paths:
                  - "venv"
      - run:
          name: Install pcapi Python package
          command: |
            venv/bin/pip install -e .
            venv/bin/pip freeze
      - run:
          name: Check for alembic multiple heads
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python -m nltk.downloader punkt stopwords &> /dev/null
            if [ ! -z "$(alembic branches)" ]; then echo "Multiple alembic heads found"; exit 1; fi
      - run:
          name: Check database and model are aligned
          command: |
            RUN_ENV=tests venv/bin/python src/pcapi/install_database_extensions.py
            RUN_ENV=tests venv/bin/alembic upgrade head
            RUN_ENV=tests venv/bin/python tests/alembic/check_db_schema.py
      - when:
          condition: << parameters.is_nightly_build >>
          steps:
            - run:
                name: Running tests
                when: always
                command: |
                  RUN_ENV=tests venv/bin/pytest tests --cov --cov-report html --junitxml=test-results/junit.xml
                  venv/bin/coveralls

      - unless:
          condition: << parameters.is_nightly_build >>
          steps:
            - run:
                when: always
                name: Running tests
                command: |
                  RUN_ENV=tests venv/bin/pytest tests --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov

  quality:
    working_directory: ~/pass-culture-api-ci
    docker:
      - image: circleci/python:3.9.4
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - unless:
          condition:
            equal: [ "master", << pipeline.git.branch >> ]
          steps:
            - restore_cache:
                key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - unless:
          condition:
            equal: [ "master", << pipeline.git.branch >> ]
          steps:
            - save_cache:
                key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
                paths:
                  - "venv"
      - run:
          name: Install pcapi Python package
          command: |
            venv/bin/pip install -e .
            venv/bin/pip freeze
      - run:
          name: Check imports are well organized with isort
          when: always
          command: venv/bin/isort . --check-only
      - run:
          name: Check code is well formatted with black
          when: always
          command: venv/bin/black . --check
      - run:
          name: Run pylint
          when: always
          command: venv/bin/pylint src tests --jobs=4

  build-container:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/pass-culture-main/api
    steps:
      - checkout:
          path: ~/pass-culture-main/api
      - restore_cache:
          name: Restore requirements checksum
          keys:
            # By using only cache prefix, we load the most recent checksum
            - pass-culture-api-requirements-checksum-
      - run:
          name: Check if the requirements have changed
          command: md5sum --status -c requirements.md5;
      - run:
          name: Build docker image when requirements have changed
          command: docker build -t passcultureapp/api-flask:latest .
          when: on_fail
      - run:
          name: Push docker image
          command: |
            docker login -u passcultureapp -p $DOCKERHUB_PASSWORD
            docker push passcultureapp/api-flask:latest
          when: on_fail
      - run:
          name: Generate requirements print
          command: md5sum ./requirements.txt > requirements.md5
          when: on_fail
      - save_cache:
          key: pass-culture-api-requirements-checksum-{{ .Revision }}
          paths:
            - requirements.md5
          when: on_fail

  build-and-push-image:
    executor: gcp-sdk
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - authenticate_gcp:
          gcp-key-name: GCP_INFRA_KEY
      - run: gcloud beta auth configure-docker ${GCP_REGION}-docker.pkg.dev
      - run: |
          docker build . \
            -f Dockerfile.gcp \
            -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:${CIRCLE_SHA1}
      - run: docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:${CIRCLE_SHA1}

  deploy-pcapi:
    executor: helm
    environment:
      GKE_CLUSTER_NAME: cluster-metier-ehp
      HELM_EXPERIMENTAL_OCI: 1
      CHART_NAME: pcapi-chart
    steps:
      - checkout
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run:
          name: Login to GCP Artifact Registry with helm
          command: echo ${GCP_INFRA_KEY} | helm registry login  -u _json_key --password-stdin ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}
      - run:
          name: Pull chart from registry
          command: helm chart pull ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:$(cat helm_versions/pcapi_chart_version.txt)
      - run:
          name: Export chart in local filesystem
          command: helm chart export ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:$(cat helm_versions/pcapi_chart_version.txt) -d tmp/
      - deploy-pcapi-gke:
          helm_chart_name: pcapi
          helm_release_name: testing
          kubernetes_namespace: testing
          helm_values_file: values.testing.yaml
      - <<: *slack-send-deployment-notification

  functional-tests-webapp:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/
    steps:
      - run:
          name: Initialize environment
          command: |
            git clone https://github.com/betagouv/pass-culture-main.git
            cd pass-culture-main
            git clone https://github.com/betagouv/pass-culture-browser.git webapp
            ./install_lib_ci_with_chrome.sh
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            cd ~/pass-culture-main/api
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Run Frontend Webapp (Prod version)
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            git checkout master
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running end2end tests WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            dockerize -wait http://localhost:3000 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture-main/webapp/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  functional-tests-pro:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/
    steps:
      - run:
          name: Init env
          command: |
            git clone https://github.com/betagouv/pass-culture-main.git
            cd pass-culture-main
            git clone https://github.com/betagouv/pass-culture-pro.git pro
            ./install_lib_ci_with_chrome.sh
      - checkout:
          path: ~/pass-culture-main/api
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            cd ~/pass-culture-main/api
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Run Frontend Pro (Prod version)
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/pro
            nvm install
            git checkout master
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running end2end tests PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/pro
            nvm install
            dockerize -wait http://localhost:3001 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture-main/pro/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

###################
#  WORKFLOWS
###################

workflows:
  version: 2
  commit:
    jobs:
      - run-tests:
          name: "Run tests after commit"
      - quality:
          name: "Run quality checks after commit"
      - build-container:
          filters:
            branches:
              only:
                - master
      - build-and-push-image:
          requires:
            - "Run tests after commit"
            - "Run quality checks after commit"
          filters:
            branches:
              only:
                - master
          context:
            - GCP
            - GCP_EHP
      - deploy-pcapi:
          requires:
            - build-and-push-image
          context:
            - GCP
            - GCP_EHP
            - Slack

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - functional-tests-webapp:
          context: Slack
          <<: *slack-fail-post-step
      - functional-tests-pro:
          context: Slack
          <<: *slack-fail-post-step
      - run-tests:
          name: "Run nightly tests"
          is_nightly_build: true
          context: Slack
          <<: *slack-fail-post-step
      - quality:
          context: Slack
          <<: *slack-fail-post-step
